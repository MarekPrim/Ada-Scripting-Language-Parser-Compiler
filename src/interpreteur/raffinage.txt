R0 : interpréter un code intermédiaire

R1 : comment interpréter un code intermédiaire

    R1.1 : récupérer les lignes utiles du code intermédiaire
    R1.2 : récupérer les variables du code intermédiaire
    R1.3 : exécuter l'ensemble du code


R2 : comment récupérer les lignes utiles du code intermédiaire

    tant que le pointeur sur le fichier n'est pas vide faire
        si la ligne n'est pas vide (remplie d'espaces) et ne commence pas par '--'
            inserer la ligne dans un tableau de String
        sinon
            rien
        fin si
        le pointeur passe a la ligne suivante
    fin tant que

R3 : comment récupérer les variables du code intermédiaire

    initialiser un compteur à 2 (les variables sont présentes à partir de la seconde ligne)

    tant que tableau_lignes(i) ne commencent pas par "début" faire

        récupérer le type des variables contenues dans la ligne

        récupérer le nom des variables contenues dans la ligne

    fin tant que

R4 : comment récupérer le type des variables contenues dans la ligne

    initialiser un compteur a 1
    tant que ligne(i) /= ':' faire
        incrémenter i
    fin tant que

    affecter à une variable le prochain mot rencontré

R5 : comment affecter à une variable le prochain mot rencontré

    tant que ligne(i) = ' ' faire
        incrémenter i
    fin tant que

    initaliser une variable typeVariable de type String
    tant que ligne(i) /= ' ' faire
        typeVariable(i) := ligne(i)
    fin tant que

R6 : comment récupérer le nom des variables contenues dans la ligne

    initialiser un compteur entier i a 1
    tant que ligne(i) /= ':' faire
        
        initialiser une variable nomVariable de type string
        acceder au nom des variables
        inserer les variables et leur type dans le tableau 'variables'

        incrémenter i
    fin tant que

R7 : comment accéder au nom des variables

    tant que ligne(i) est un chiffre ou une lettre (minuscule ou majuscule) faire
        nomVariable(i) := ligne(i)
    fin tant que

R8 : comment insérer les variables et leur type dans un tableau 

    vars(i).type := typeVariable
    vars(i).identificateur := nomVariable

R9 : comment exécuter l'ensemble du code

    déplacer le compteur de ligne à la ligne suivante de la ligne commençant par 'Début'

    tant que ligne(i) ne commence pas par 'Fin' faire
        interpréter la commande contenue dans la ligne courante
    fin tant que

R10 : comment interpréter la commande contenue dans la ligne courante

    si la ligne courante contient l'oprérateur d'affectation alors

        évaluer le résultat à droite de l'affectation

        récupérer le nom de la variable à affecter

        récupérer l'indice du tableau variables associé à la variable à affecter

        variables(i).valeur := résultat

    sinon si la ligne courante contient 'IF' alors
        recupérer la valeur de la variable successive au mot IF
        si la valeur est vraie alors
            déplacer le pointeur de lignes sur le numéro de ligne successif au mot GOTO
        sinon
            incrémenter le pointeur de lignes
        fin si

    sinon si la ligne courante contient 'GOTO' alors

        déplacer le pointeur de lignes sur le numéro de ligne successif au mot GOTO
    
    sinon si la ligne courante contient 'NULL' alors
        ne rien faire
        passer à la ligne suivante

    fin si

R11 : comment évaluer le résultat à droite de l'affectation

    si la ligne courante contient un opérateur logique alors
        initialiser une variable résultat de type booléen
        evaluer le resultat de l'opération entre les opérandes suivante et précédente de l'opérateur logique

    sinon si la ligne courante contient un opérateur arithmétique alors
        initialiser une variable nombre de type entier
        si la ligne courante contient un opérateur arithmétique alors
            evaluer le resultat de l'opération entre les opérandes suivante et précédente de l'opérateur arithmétique
        sinon
            nombre := valeur à droite de l'expression
        fin si
    fin si

R12 : comment évaluer le résultat de l'opération entre les opérandes suivante et précédente de l'opérateur logique

    si op = '=' alors
        si précédente = suivante alors
            résultat = vrai
        sinon
            résultat = faux
        fin si
    sinon si op = '<' alors
        si précédente < suivante alors
            résultat = vrai
        sinon 
            résultat = faux
        fin si
    sinon si op = '>' alors
        si précédente > suivante alors
            résultat = vrai
        sinon 
            résultat = faux
        fin si
    sinon si op = '<=' alors
        si précédente <= suivante alors
            résultat = vrai
        sinon 
            résultat = faux
        fin si
    sinon si op = '>=' alors
        si précédente >= suivante alors
            résultat = vrai
        sinon 
            résultat = faux
        fin si
    sinon
        lever l'exception Operateur_Incorrect
    fin si

R13 : comment évaluer le résultat de l'opération entre les opérandes suivante et précédente de l'opérateur arithmétique
 
    si op = '+' alors
        nombre := précédente + suivante 
    sinon si op = '-' alors
        nombre := précédente - suivante
    sinon si op = '*' alors
        nombre := précédente * suivante
    sinon si op = '/' alors
        nombre := précédente / suivante
    sinon
        lever l'exception Operateur_Incorrect;
    fin si

R14 : comment récupérer le nom de la variable à affecter

    i := 1
    déclarer une variable nomVariable de type string 

    tant que ligne (i) = ' ' faire
        incrémenter i
    fin tant que

    k := 1
    tant que ligne(i) est une lettre ou un chiffre faire
        nomVariable(k) := ligne(i) 
    fin tant que

R15 : comment récupérer la case du tableau associée à la variable à affecter

    indice = 0
    tant que i < CMAX et indice = 0 faire
        si variables(i).identificateur = nomVariable alors
            indice = i
        fin si
    fin tant que

        


    
        